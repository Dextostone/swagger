# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NewPublisherAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NewPublisherAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'street2': 'str',
            'zip': 'str',
            'street1': 'str',
            'state': 'str',
            'city': 'str',
            'country': 'str'
        }

        self.attribute_map = {
            'street2': 'street2',
            'zip': 'zip',
            'street1': 'street1',
            'state': 'state',
            'city': 'city',
            'country': 'country'
        }

        self._street2 = None
        self._zip = None
        self._street1 = None
        self._state = None
        self._city = None
        self._country = None

    @property
    def street2(self):
        """
        Gets the street2 of this NewPublisherAddress.


        :return: The street2 of this NewPublisherAddress.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """
        Sets the street2 of this NewPublisherAddress.


        :param street2: The street2 of this NewPublisherAddress.
        :type: str
        """
        self._street2 = street2

    @property
    def zip(self):
        """
        Gets the zip of this NewPublisherAddress.


        :return: The zip of this NewPublisherAddress.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this NewPublisherAddress.


        :param zip: The zip of this NewPublisherAddress.
        :type: str
        """
        self._zip = zip

    @property
    def street1(self):
        """
        Gets the street1 of this NewPublisherAddress.


        :return: The street1 of this NewPublisherAddress.
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """
        Sets the street1 of this NewPublisherAddress.


        :param street1: The street1 of this NewPublisherAddress.
        :type: str
        """
        self._street1 = street1

    @property
    def state(self):
        """
        Gets the state of this NewPublisherAddress.


        :return: The state of this NewPublisherAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this NewPublisherAddress.


        :param state: The state of this NewPublisherAddress.
        :type: str
        """
        self._state = state

    @property
    def city(self):
        """
        Gets the city of this NewPublisherAddress.


        :return: The city of this NewPublisherAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this NewPublisherAddress.


        :param city: The city of this NewPublisherAddress.
        :type: str
        """
        self._city = city

    @property
    def country(self):
        """
        Gets the country of this NewPublisherAddress.


        :return: The country of this NewPublisherAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this NewPublisherAddress.


        :param country: The country of this NewPublisherAddress.
        :type: str
        """
        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

