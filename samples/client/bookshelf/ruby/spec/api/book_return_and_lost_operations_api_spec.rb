=begin
Book Sharing API

This is a backend for distributed library application

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::BookReturnAndLostOperationsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BookReturnAndLostOperationsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::BookReturnAndLostOperationsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BookReturnAndLostOperationsApi' do
    it 'should create an instact of BookReturnAndLostOperationsApi' do
      @instance.should be_a(SwaggerClient::BookReturnAndLostOperationsApi)
    end
  end

  # unit tests for mark_book_as_lost
  # Mark lost book
  # Mark borrowed book as lost
  # @param book_id The id of book which is returned
  # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_id The id of user who had borrowed the book. If not provided, the recent borrower will be used as default.
  # @return [nil]
  describe 'mark_book_as_lost test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for mark_book_as_returned
  # Return Book
  # Return borrowed book
  # @param book_id The id of book which is returned
  # @param user_id The id of user who is returning the book. If not provided current logged in user is used
  # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mark_book_as_returned test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
