=begin
Book Sharing API

This is a backend for distributed library application

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::BookSearchApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BookSearchApi' do
  before do
    # run before each test
    @instance = SwaggerClient::BookSearchApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BookSearchApi' do
    it 'should create an instact of BookSearchApi' do
      @instance.should be_a(SwaggerClient::BookSearchApi)
    end
  end

  # unit tests for search_by_author
  # Returns list of books written by the requested author{s}
  # Returns list of books written by the requested author{s}
  # @param author Name of the author by which books can be searched
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of books to be retrieved
  # @option opts [Integer] :page Page number from where we want to start fetching books
  # @return [nil]
  describe 'search_by_author test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for search_by_tags
  # Returns list of books having the requested tag{s}
  # Returns list of books having the requested tag{s}
  # @param tags List of tags by which books can be searched
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of books to be retrieved
  # @option opts [Integer] :page Page number from where we want to start fetching books
  # @return [nil]
  describe 'search_by_tags test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for search_like_name
  # Returns list of books which have similar requested name
  # Returns list of books which have similar requested name
  # @param name Name of the book by which books can be searched
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of books to be retrieved
  # @option opts [Integer] :page Page number from where we want to start fetching books
  # @return [nil]
  describe 'search_like_name test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
