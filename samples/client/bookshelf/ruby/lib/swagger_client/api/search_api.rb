=begin
Book Sharing API

This is a backend for distributed library application

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns list of entities matching the searched query string
    # Returns list of entities matching the searched query string
    # @param q Search string
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of searched records to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching searched  records
    # @return [nil]
    def search(q, authorization, opts = {})
      search_with_http_info(q, authorization, opts)
      return nil
    end

    # Returns list of entities matching the searched query string
    # Returns list of entities matching the searched query string
    # @param q Search string
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of searched records to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching searched  records
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def search_with_http_info(q, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SearchApi#search ..."
      end
      
      # verify the required parameter 'q' is set
      fail "Missing the required parameter 'q' when calling search" if q.nil?
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling search" if authorization.nil?
      
      # resource path
      local_var_path = "/search".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'q'] = q
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'page'] = opts[:'page'] if opts[:'page']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
