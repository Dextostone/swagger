=begin
Book Sharing API

This is a backend for distributed library application

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class BookRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Lend a book
    # Approve the request for borrowing book
    # @param book_id The id of book which is requested.
    # @param user_id The id of user whose request needs to be approved.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def approve_book_request(book_id, user_id, authorization, opts = {})
      approve_book_request_with_http_info(book_id, user_id, authorization, opts)
      return nil
    end

    # Lend a book
    # Approve the request for borrowing book
    # @param book_id The id of book which is requested.
    # @param user_id The id of user whose request needs to be approved.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def approve_book_request_with_http_info(book_id, user_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookRequestApi#approve_book_request ..."
      end
      
      # verify the required parameter 'book_id' is set
      fail "Missing the required parameter 'book_id' when calling approve_book_request" if book_id.nil?
      
      # verify the required parameter 'user_id' is set
      fail "Missing the required parameter 'user_id' when calling approve_book_request" if user_id.nil?
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling approve_book_request" if authorization.nil?
      
      # resource path
      local_var_path = "/book/request/approve/{bookId}/{userId}".sub('{format}','json').sub('{' + 'bookId' + '}', book_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookRequestApi#approve_book_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reject the request for borrowing a book
    # Reject the request for borrowing book
    # @param book_id The id of book whose request needs to be rejected.
    # @param user_id The id of user whose request needs to be rejected.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reject_book_request(book_id, user_id, authorization, opts = {})
      reject_book_request_with_http_info(book_id, user_id, authorization, opts)
      return nil
    end

    # Reject the request for borrowing a book
    # Reject the request for borrowing book
    # @param book_id The id of book whose request needs to be rejected.
    # @param user_id The id of user whose request needs to be rejected.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reject_book_request_with_http_info(book_id, user_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookRequestApi#reject_book_request ..."
      end
      
      # verify the required parameter 'book_id' is set
      fail "Missing the required parameter 'book_id' when calling reject_book_request" if book_id.nil?
      
      # verify the required parameter 'user_id' is set
      fail "Missing the required parameter 'user_id' when calling reject_book_request" if user_id.nil?
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling reject_book_request" if authorization.nil?
      
      # resource path
      local_var_path = "/book/request/reject/{bookId}/{userId}".sub('{format}','json').sub('{' + 'bookId' + '}', book_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookRequestApi#reject_book_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Borrow a book
    # Send a request to borrow a book
    # @param book_id The id of book which is requested.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def request_book(book_id, authorization, opts = {})
      request_book_with_http_info(book_id, authorization, opts)
      return nil
    end

    # Borrow a book
    # Send a request to borrow a book
    # @param book_id The id of book which is requested.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_book_with_http_info(book_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookRequestApi#request_book ..."
      end
      
      # verify the required parameter 'book_id' is set
      fail "Missing the required parameter 'book_id' when calling request_book" if book_id.nil?
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling request_book" if authorization.nil?
      
      # resource path
      local_var_path = "/book/request/{bookId}".sub('{format}','json').sub('{' + 'bookId' + '}', book_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookRequestApi#request_book\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
