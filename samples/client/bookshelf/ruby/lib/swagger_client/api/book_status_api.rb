=begin
Book Sharing API

This is a backend for distributed library application

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class BookStatusApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Current status of the book
    # Returns current status of the book
    # @param book_id The id of book which is requested.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields List of fields which you want as part of response instead of complete status
    # @return [nil]
    def current_status_of_book(book_id, authorization, opts = {})
      current_status_of_book_with_http_info(book_id, authorization, opts)
      return nil
    end

    # Current status of the book
    # Returns current status of the book
    # @param book_id The id of book which is requested.
    # @param authorization Token which needs to be sent as \&quot;Authorization: Bearer XXXXXX\&quot; 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields List of fields which you want as part of response instead of complete status
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def current_status_of_book_with_http_info(book_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookStatusApi#current_status_of_book ..."
      end
      
      # verify the required parameter 'book_id' is set
      fail "Missing the required parameter 'book_id' when calling current_status_of_book" if book_id.nil?
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling current_status_of_book" if authorization.nil?
      
      # resource path
      local_var_path = "/book/status/{bookId}".sub('{format}','json').sub('{' + 'bookId' + '}', book_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if opts[:'fields']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookStatusApi#current_status_of_book\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
