=begin
Book Sharing API

This is a backend for distributed library application

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class UserReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns list of books borrowed by the current logged-in user or list of books user is currently reading
    # Returns list of books borrowed by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books
    # @return [nil]
    def get_borrowed_books_by_user(opts = {})
      get_borrowed_books_by_user_with_http_info(opts)
      return nil
    end

    # Returns list of books borrowed by the current logged-in user or list of books user is currently reading
    # Returns list of books borrowed by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_borrowed_books_by_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserReportsApi#get_borrowed_books_by_user ..."
      end
      
      # resource path
      local_var_path = "/user/reports/borrowed-books".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'page'] = opts[:'page'] if opts[:'page']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserReportsApi#get_borrowed_books_by_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of books lent by the current logged-in user.
    # Returns list of books lent by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [nil]
    def get_lent_books_by_user(opts = {})
      get_lent_books_by_user_with_http_info(opts)
      return nil
    end

    # Returns list of books lent by the current logged-in user.
    # Returns list of books lent by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_lent_books_by_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserReportsApi#get_lent_books_by_user ..."
      end
      
      # resource path
      local_var_path = "/user/reports/lent-books".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'page'] = opts[:'page'] if opts[:'page']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserReportsApi#get_lent_books_by_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of books lost by the current logged-in user
    # Returns list of books lost by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [nil]
    def get_lost_books_by_user(opts = {})
      get_lost_books_by_user_with_http_info(opts)
      return nil
    end

    # Returns list of books lost by the current logged-in user
    # Returns list of books lost by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_lost_books_by_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserReportsApi#get_lost_books_by_user ..."
      end
      
      # resource path
      local_var_path = "/user/reports/lost-books".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'page'] = opts[:'page'] if opts[:'page']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserReportsApi#get_lost_books_by_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of books requested by the current logged-in user
    # Returns list of books requested by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [nil]
    def get_requested_books_by_user(opts = {})
      get_requested_books_by_user_with_http_info(opts)
      return nil
    end

    # Returns list of books requested by the current logged-in user
    # Returns list of books requested by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_requested_books_by_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserReportsApi#get_requested_books_by_user ..."
      end
      
      # resource path
      local_var_path = "/user/reports/requested-books".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'page'] = opts[:'page'] if opts[:'page']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserReportsApi#get_requested_books_by_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns list of books read by the current logged-in user
    # Returns list of books read by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [nil]
    def get_returned_books_by_user(opts = {})
      get_returned_books_by_user_with_http_info(opts)
      return nil
    end

    # Returns list of books read by the current logged-in user
    # Returns list of books read by the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of books to be retrieved
    # @option opts [Integer] :page Page number from where we want to start fetching books.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_returned_books_by_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserReportsApi#get_returned_books_by_user ..."
      end
      
      # resource path
      local_var_path = "/user/reports/returned-books".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'page'] = opts[:'page'] if opts[:'page']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = []
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserReportsApi#get_returned_books_by_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
