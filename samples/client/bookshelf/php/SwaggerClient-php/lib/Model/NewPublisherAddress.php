<?php
/**
 * NewPublisherAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NewPublisherAddress Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewPublisherAddress implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'street2' => 'string',
        'zip' => 'string',
        'street1' => 'string',
        'state' => 'string',
        'city' => 'string',
        'country' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'street2' => 'street2',
        'zip' => 'zip',
        'street1' => 'street1',
        'state' => 'state',
        'city' => 'city',
        'country' => 'country'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'street2' => 'setStreet2',
        'zip' => 'setZip',
        'street1' => 'setStreet1',
        'state' => 'setState',
        'city' => 'setCity',
        'country' => 'setCountry'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'street2' => 'getStreet2',
        'zip' => 'getZip',
        'street1' => 'getStreet1',
        'state' => 'getState',
        'city' => 'getCity',
        'country' => 'getCountry'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $street2 
      * @var string
      */
    protected $street2;
    
    /**
      * $zip 
      * @var string
      */
    protected $zip;
    
    /**
      * $street1 
      * @var string
      */
    protected $street1;
    
    /**
      * $state 
      * @var string
      */
    protected $state;
    
    /**
      * $city 
      * @var string
      */
    protected $city;
    
    /**
      * $country 
      * @var string
      */
    protected $country;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->street2 = $data["street2"];
            $this->zip = $data["zip"];
            $this->street1 = $data["street1"];
            $this->state = $data["state"];
            $this->city = $data["city"];
            $this->country = $data["country"];
        }
    }
    
    /**
     * Gets street2
     * @return string
     */
    public function getStreet2()
    {
        return $this->street2;
    }
  
    /**
     * Sets street2
     * @param string $street2 
     * @return $this
     */
    public function setStreet2($street2)
    {
        
        $this->street2 = $street2;
        return $this;
    }
    
    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->zip;
    }
  
    /**
     * Sets zip
     * @param string $zip 
     * @return $this
     */
    public function setZip($zip)
    {
        
        $this->zip = $zip;
        return $this;
    }
    
    /**
     * Gets street1
     * @return string
     */
    public function getStreet1()
    {
        return $this->street1;
    }
  
    /**
     * Sets street1
     * @param string $street1 
     * @return $this
     */
    public function setStreet1($street1)
    {
        
        $this->street1 = $street1;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state 
     * @return $this
     */
    public function setState($state)
    {
        
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
  
    /**
     * Sets city
     * @param string $city 
     * @return $this
     */
    public function setCity($city)
    {
        
        $this->city = $city;
        return $this;
    }
    
    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }
  
    /**
     * Sets country
     * @param string $country 
     * @return $this
     */
    public function setCountry($country)
    {
        
        $this->country = $country;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
