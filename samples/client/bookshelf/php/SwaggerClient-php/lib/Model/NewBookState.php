<?php
/**
 * NewBookState
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NewBookState Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewBookState implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'book' => '\Swagger\Client\Model\Book',
        'current_status' => 'string',
        'uploaded_by' => '\Swagger\Client\Model\ResponseUser',
        'lent_by' => '\Swagger\Client\Model\ResponseUser',
        'lost_by' => '\Swagger\Client\Model\ResponseUser',
        'returned_by' => '\Swagger\Client\Model\ResponseUser',
        'requested_by' => '\Swagger\Client\Model\ResponseUser[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'book' => 'book',
        'current_status' => 'currentStatus',
        'uploaded_by' => 'uploadedBy',
        'lent_by' => 'lentBy',
        'lost_by' => 'lostBy',
        'returned_by' => 'returnedBy',
        'requested_by' => 'requestedBy'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'book' => 'setBook',
        'current_status' => 'setCurrentStatus',
        'uploaded_by' => 'setUploadedBy',
        'lent_by' => 'setLentBy',
        'lost_by' => 'setLostBy',
        'returned_by' => 'setReturnedBy',
        'requested_by' => 'setRequestedBy'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'book' => 'getBook',
        'current_status' => 'getCurrentStatus',
        'uploaded_by' => 'getUploadedBy',
        'lent_by' => 'getLentBy',
        'lost_by' => 'getLostBy',
        'returned_by' => 'getReturnedBy',
        'requested_by' => 'getRequestedBy'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $book 
      * @var \Swagger\Client\Model\Book
      */
    protected $book;
    
    /**
      * $current_status 
      * @var string
      */
    protected $current_status;
    
    /**
      * $uploaded_by 
      * @var \Swagger\Client\Model\ResponseUser
      */
    protected $uploaded_by;
    
    /**
      * $lent_by 
      * @var \Swagger\Client\Model\ResponseUser
      */
    protected $lent_by;
    
    /**
      * $lost_by 
      * @var \Swagger\Client\Model\ResponseUser
      */
    protected $lost_by;
    
    /**
      * $returned_by 
      * @var \Swagger\Client\Model\ResponseUser
      */
    protected $returned_by;
    
    /**
      * $requested_by 
      * @var \Swagger\Client\Model\ResponseUser[]
      */
    protected $requested_by;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->book = $data["book"];
            $this->current_status = $data["current_status"];
            $this->uploaded_by = $data["uploaded_by"];
            $this->lent_by = $data["lent_by"];
            $this->lost_by = $data["lost_by"];
            $this->returned_by = $data["returned_by"];
            $this->requested_by = $data["requested_by"];
        }
    }
    
    /**
     * Gets book
     * @return \Swagger\Client\Model\Book
     */
    public function getBook()
    {
        return $this->book;
    }
  
    /**
     * Sets book
     * @param \Swagger\Client\Model\Book $book 
     * @return $this
     */
    public function setBook($book)
    {
        
        $this->book = $book;
        return $this;
    }
    
    /**
     * Gets current_status
     * @return string
     */
    public function getCurrentStatus()
    {
        return $this->current_status;
    }
  
    /**
     * Sets current_status
     * @param string $current_status 
     * @return $this
     */
    public function setCurrentStatus($current_status)
    {
        
        $this->current_status = $current_status;
        return $this;
    }
    
    /**
     * Gets uploaded_by
     * @return \Swagger\Client\Model\ResponseUser
     */
    public function getUploadedBy()
    {
        return $this->uploaded_by;
    }
  
    /**
     * Sets uploaded_by
     * @param \Swagger\Client\Model\ResponseUser $uploaded_by 
     * @return $this
     */
    public function setUploadedBy($uploaded_by)
    {
        
        $this->uploaded_by = $uploaded_by;
        return $this;
    }
    
    /**
     * Gets lent_by
     * @return \Swagger\Client\Model\ResponseUser
     */
    public function getLentBy()
    {
        return $this->lent_by;
    }
  
    /**
     * Sets lent_by
     * @param \Swagger\Client\Model\ResponseUser $lent_by 
     * @return $this
     */
    public function setLentBy($lent_by)
    {
        
        $this->lent_by = $lent_by;
        return $this;
    }
    
    /**
     * Gets lost_by
     * @return \Swagger\Client\Model\ResponseUser
     */
    public function getLostBy()
    {
        return $this->lost_by;
    }
  
    /**
     * Sets lost_by
     * @param \Swagger\Client\Model\ResponseUser $lost_by 
     * @return $this
     */
    public function setLostBy($lost_by)
    {
        
        $this->lost_by = $lost_by;
        return $this;
    }
    
    /**
     * Gets returned_by
     * @return \Swagger\Client\Model\ResponseUser
     */
    public function getReturnedBy()
    {
        return $this->returned_by;
    }
  
    /**
     * Sets returned_by
     * @param \Swagger\Client\Model\ResponseUser $returned_by 
     * @return $this
     */
    public function setReturnedBy($returned_by)
    {
        
        $this->returned_by = $returned_by;
        return $this;
    }
    
    /**
     * Gets requested_by
     * @return \Swagger\Client\Model\ResponseUser[]
     */
    public function getRequestedBy()
    {
        return $this->requested_by;
    }
  
    /**
     * Sets requested_by
     * @param \Swagger\Client\Model\ResponseUser[] $requested_by 
     * @return $this
     */
    public function setRequestedBy($requested_by)
    {
        
        $this->requested_by = $requested_by;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
