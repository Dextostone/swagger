<?php
/**
 * NewBook
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NewBook Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewBook implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'name' => 'string',
        'authors' => '\Swagger\Client\Model\NewAuthor[]',
        'comments' => '\Swagger\Client\Model\NewComment[]',
        'publisher' => '\Swagger\Client\Model\NewPublisher',
        'published_on' => '\DateTime',
        'isbn13' => 'string',
        'isbn10' => 'string',
        'tags' => 'string[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'name' => 'name',
        'authors' => 'authors',
        'comments' => 'comments',
        'publisher' => 'publisher',
        'published_on' => 'publishedOn',
        'isbn13' => 'isbn13',
        'isbn10' => 'isbn10',
        'tags' => 'tags'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'name' => 'setName',
        'authors' => 'setAuthors',
        'comments' => 'setComments',
        'publisher' => 'setPublisher',
        'published_on' => 'setPublishedOn',
        'isbn13' => 'setIsbn13',
        'isbn10' => 'setIsbn10',
        'tags' => 'setTags'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'name' => 'getName',
        'authors' => 'getAuthors',
        'comments' => 'getComments',
        'publisher' => 'getPublisher',
        'published_on' => 'getPublishedOn',
        'isbn13' => 'getIsbn13',
        'isbn10' => 'getIsbn10',
        'tags' => 'getTags'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $authors 
      * @var \Swagger\Client\Model\NewAuthor[]
      */
    protected $authors;
    
    /**
      * $comments 
      * @var \Swagger\Client\Model\NewComment[]
      */
    protected $comments;
    
    /**
      * $publisher 
      * @var \Swagger\Client\Model\NewPublisher
      */
    protected $publisher;
    
    /**
      * $published_on 
      * @var \DateTime
      */
    protected $published_on;
    
    /**
      * $isbn13 
      * @var string
      */
    protected $isbn13;
    
    /**
      * $isbn10 
      * @var string
      */
    protected $isbn10;
    
    /**
      * $tags 
      * @var string[]
      */
    protected $tags;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->name = $data["name"];
            $this->authors = $data["authors"];
            $this->comments = $data["comments"];
            $this->publisher = $data["publisher"];
            $this->published_on = $data["published_on"];
            $this->isbn13 = $data["isbn13"];
            $this->isbn10 = $data["isbn10"];
            $this->tags = $data["tags"];
        }
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets authors
     * @return \Swagger\Client\Model\NewAuthor[]
     */
    public function getAuthors()
    {
        return $this->authors;
    }
  
    /**
     * Sets authors
     * @param \Swagger\Client\Model\NewAuthor[] $authors 
     * @return $this
     */
    public function setAuthors($authors)
    {
        
        $this->authors = $authors;
        return $this;
    }
    
    /**
     * Gets comments
     * @return \Swagger\Client\Model\NewComment[]
     */
    public function getComments()
    {
        return $this->comments;
    }
  
    /**
     * Sets comments
     * @param \Swagger\Client\Model\NewComment[] $comments 
     * @return $this
     */
    public function setComments($comments)
    {
        
        $this->comments = $comments;
        return $this;
    }
    
    /**
     * Gets publisher
     * @return \Swagger\Client\Model\NewPublisher
     */
    public function getPublisher()
    {
        return $this->publisher;
    }
  
    /**
     * Sets publisher
     * @param \Swagger\Client\Model\NewPublisher $publisher 
     * @return $this
     */
    public function setPublisher($publisher)
    {
        
        $this->publisher = $publisher;
        return $this;
    }
    
    /**
     * Gets published_on
     * @return \DateTime
     */
    public function getPublishedOn()
    {
        return $this->published_on;
    }
  
    /**
     * Sets published_on
     * @param \DateTime $published_on 
     * @return $this
     */
    public function setPublishedOn($published_on)
    {
        
        $this->published_on = $published_on;
        return $this;
    }
    
    /**
     * Gets isbn13
     * @return string
     */
    public function getIsbn13()
    {
        return $this->isbn13;
    }
  
    /**
     * Sets isbn13
     * @param string $isbn13 
     * @return $this
     */
    public function setIsbn13($isbn13)
    {
        
        $this->isbn13 = $isbn13;
        return $this;
    }
    
    /**
     * Gets isbn10
     * @return string
     */
    public function getIsbn10()
    {
        return $this->isbn10;
    }
  
    /**
     * Sets isbn10
     * @param string $isbn10 
     * @return $this
     */
    public function setIsbn10($isbn10)
    {
        
        $this->isbn10 = $isbn10;
        return $this;
    }
    
    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->tags;
    }
  
    /**
     * Sets tags
     * @param string[] $tags 
     * @return $this
     */
    public function setTags($tags)
    {
        
        $this->tags = $tags;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
